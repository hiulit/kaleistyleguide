/*
# Phytoplankton ‚ù§Ô∏è Markdown

One of the great things about Phytoplankton is that you can use the same style sheets you're using right now in your project.
How cool is that, right?

You just need to comment your style sheets using [Markdown](http://daringfireball.net/projects/markdown/syntax)
and then, boom!! The magic happens!

You end up with a **fully documented style sheet and a beautifully auto-generated living style guide**.
Killing two (tofu) birds with one stone.
What a deal!

Phytoplankton uses [marked.js](https://github.com/chjj/marked) as the Markdown parser, and by default, it has
[GFM (GitHub Flavored Markdown)](https://help.github.com/articles/github-flavored-markdown) enabled.
So go ahead and [master your Markdown](http://guides.github.com/overviews/mastering-markdown/).

*/

/*
# Getting Started

Phytoplankton uses `phytoplankton-core/scripts/config.js` as a base to point at all the style sheets that you want to document.

Here you can set the menu based on your style sheets and some configurations.

Phytoplankton will **automatically create a menu** out of your style sheets.

This is how this particular `config.js` looks like:

<pre data-src="phytoplankton-core/scripts/config.js"></pre>

*/

/*
# Comments

Comment your style sheets like you would normally do, starting with `/ *` and ending with `* /`.

Each comment will become a new section.

*/

/*
# Headings

The `<h1>` (or `#` in Markdown) and the `<h2>` (or `##` in Markdown) of the comments will become the titles and subtitles of the sections.

These titles and subtitles will be converted into the left menu.

The rest of the headings won't appear as sections of the menu.

*/

/*
# Code blocks

You can write your code indented with 1 tab (or 4 spaces) to show it as a code block, like this one:

	I'm a code block! Indented with 1 tab (or 4 spaces)

*/

/*
# Syntax highlighter

*Phytoplankton uses [Prism](http://prismjs.com/) as the syntax highlighter. See more at [plugins/prism.css](#/phytoplankton-examples/plugins/prism.css)*.

Wrap your code with
[fenced code blocks](https://help.github.com/articles/github-flavored-markdown#fenced-code-blocks) `` ``` `` +
`language code`, like this:

	```scss
	@mixin silly-links {
		a {
			color: blue;
			background-color: red;
		}
	}

	@include silly-links;
	```

And you'll get this:

```scss
@mixin silly-links {
	a {
		color: blue;
		background-color: red;
	}
}

@include silly-links;
```

Unlike code blocks, there's no need for indentation when using the syntax highlighter.

*/

/*
# Toolbar

When you use syntax highlighting, **Phytoplankton** creates a toolbar just above the code block.

This toolbar shows the language of the code and a button to copy said code.

```markup
<ul class="phytoplankton-tabs">
    <li class="phytoplankton-tabs__item is-active" data-tab="tab-x">scss</li>
    <li class="copy-to-clipboard" data-clipboard-target="#tab-x" id="copy-tab-x">
        <svg class="svg-icon" viewBox="0 0 20 20">
            <path fill="none" d="M18.378,1.062H3.855c-0.309,0-0.559,0.25-0.559,0.559c0,0.309,0.25,0.559,0.559,0.559h13.964v13.964c0,0.309,0.25,0.559,0.559,0.559c0.31,0,0.56-0.25,0.56-0.559V1.621C18.938,1.312,18.688,1.062,18.378,1.062z M16.144,3.296H1.621c-0.309,0-0.559,0.25-0.559,0.559v14.523c0,0.31,0.25,0.56,0.559,0.56h14.523c0.309,0,0.559-0.25,0.559-0.56V3.855C16.702,3.546,16.452,3.296,16.144,3.296z M15.586,17.262c0,0.31-0.25,0.558-0.56,0.558H2.738c-0.309,0-0.559-0.248-0.559-0.558V4.972c0-0.309,0.25-0.559,0.559-0.559h12.289c0.31,0,0.56,0.25,0.56,0.559V17.262z"></path>
        </svg>
    <div class="tooltip">Copy to Clipboard</div>
    </li>
</ul>
```

*Inline code and code blocks without syntax highlight don't have toolbars.*

*/

/*
# Rendering HTML

Wrap your code with
[fenced code blocks](https://help.github.com/articles/github-flavored-markdown#fenced-code-blocks) `` ``` `` +
`markup`, like this:

	```markup
	<section>
		<h1>Heading</h1>
		<p>Bunch of awesome content</p>
	</section>
	```

Phytoplankton will automatically render the code as both HTML and the code block with syntax highlighting.

```markup
<section>
	<h1>Heading</h1>
	<p>Bunch of awesome content</p>
</section>
```

*/

/*
# Using preprocessors

One of the best functionalities of **Phytoplankton** is that it leverages the main 3 preprocessors:

* [Sass](#/phytoplankton-examples/preprocessors/scss.scss)
* [Less](#/phytoplankton-examples/preprocessors/less.less)
* [Stylus](#/phytoplankton-examples/preprocessors/stylus.styl)

**Without any external tool!**

Just drop your style sheets in any of these formats and you'll be just fine. Take a look for yourself in the **Preprocessors** section or by clicking the links above üòâ

*/

/*
# Using external scripts

Phytoplankton lets you use external scripts.

Just add

	@javascript { "your-script.js" }

anywhere in your file and it should work.

This creates a `<script>` tag in the `<head>`.

You can change the default path from where to load external scripts in `config.js`.

@javascript { "click.js" }

```markup
<button class="js-click">Click me!</button>
```

 */

/*
# Phytoplankton styles

To make sure that the rendered code of your style sheets is unaffected by Phytoplankton's styles,
and vice versa, Phytoplankton wraps all your CSS in `.code-render`.

These styles are appended at the end of `<section class="phytoplankton-page">` so they rank at the top of the
[specificity wars](http://www.stuffandnonsense.co.uk/archives/css_specificity_wars.html).

```
<section class="phytoplankton-page js-phytoplankton-page">
	<article class="phytoplankton-page__item">...</article>
	<article class="phytoplankton-page__item">...</article>
	<article class="phytoplankton-page__item">...</article>
	<style>
		.code-render {
			.whatever {
				color: red;
			}
		}
	</style>
</section>
```

*/
